@{
    ViewBag.Title = "Reportes de Ventas";
}

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Facturacion")">Facturas</a></li>
            <li class="breadcrumb-item active" aria-current="page">Reportes</li>
        </ol>
    </nav>

    <h2 class="mb-4">@ViewBag.Title</h2>

    <div class="row">
        <!-- Panel de filtros -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-sliders"></i> Filtros</h5>
                </div>
                <div class="card-body">
                    <form id="reportForm">
                        <div class="mb-3">
                            <label for="fechaInicio" class="form-label">Fecha Inicio:</label>
                            <input type="date" id="fechaInicio" class="form-control" value="@DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd")">
                        </div>
                        <div class="mb-3">
                            <label for="fechaFin" class="form-label">Fecha Fin:</label>
                            <input type="date" id="fechaFin" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                        </div>
                        <div class="mb-3">
                            <label for="tipoReporte" class="form-label">Tipo de Reporte:</label>
                            <select id="tipoReporte" class="form-select">
                                <option value="diario">Ventas por Día</option>
                                <option value="categorias">Ventas por Categoría</option>
                                <option value="productos">Productos más Vendidos</option>
                            </select>
                        </div>
                        <div class="d-grid">
                            <button type="submit" id="btnGenerarReporte" class="btn btn-primary">
                                <i class="bi bi-bar-chart"></i> Generar Reporte
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Resumen -->
            <div class="card mb-4" id="resumenCard" style="display: none;">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-info-circle"></i> Resumen</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Período:</label>
                        <p id="periodoTexto" class="mb-0">-</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Total de Facturas:</label>
                        <p id="totalFacturas" class="mb-0">-</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Monto Total:</label>
                        <p id="montoTotal" class="fw-bold text-success mb-0">-</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Panel de resultados -->
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="bi bi-graph-up"></i> Resultados</h5>
                        <div>
                            <button id="btnExportarExcel" class="btn btn-sm btn-light" style="display: none;">
                                <i class="bi bi-file-excel"></i> Exportar Excel
                            </button>
                            <button id="btnImprimir" class="btn btn-sm btn-light ms-2" style="display: none;">
                                <i class="bi bi-printer"></i> Imprimir
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Mensaje inicial -->
                    <div id="mensajeInicial" class="text-center py-5">
                        <i class="bi bi-bar-chart-steps" style="font-size: 3rem;"></i>
                        <h4 class="mt-3">Seleccione los filtros y genere un reporte</h4>
                        <p class="text-muted">Los resultados se mostrarán aquí</p>
                    </div>

                    <!-- Spinner de carga -->
                    <div id="spinner" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-3">Generando reporte...</p>
                    </div>

                    <!-- Contenedor para gráficos -->
                    <div id="chartContainer" style="height: 300px; display: none;"></div>

                    <!-- Tabla de resultados -->
                    <div id="tablaResultados" class="mt-4" style="display: none;">
                        <h5 id="tituloTabla" class="mb-3"></h5>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover" id="tablaDatos">
                                <thead id="tablaHeader"></thead>
                                <tbody id="tablaBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Variables globales
        let myChart = null;
        let reportData = null;

        $(document).ready(function () {
            // Prevenir envío del formulario por defecto
            $("#reportForm").on("submit", function(e) {
                e.preventDefault();
                $("#btnGenerarReporte").click();
            });

            // Generar reporte
            $("#btnGenerarReporte").click(function () {
                const fechaInicio = $("#fechaInicio").val();
                const fechaFin = $("#fechaFin").val();
                const tipoReporte = $("#tipoReporte").val();

                // Validaciones
                if (!fechaInicio || !fechaFin) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Datos incompletos',
                        text: 'Por favor seleccione un rango de fechas válido'
                    });
                    return;
                }

                // Validar que fecha fin no sea menor que fecha inicio
                if (new Date(fechaFin) < new Date(fechaInicio)) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Rango inválido',
                        text: 'La fecha final debe ser mayor o igual a la fecha inicial'
                    });
                    return;
                }

                // Mostrar spinner
                $("#mensajeInicial").hide();
                $("#chartContainer").hide();
                $("#tablaResultados").hide();
                $("#spinner").show();
                $("#resumenCard").hide();
                $("#btnExportarExcel, #btnImprimir").hide();

                // Realizar petición AJAX
                $.ajax({
                    url: '@Url.Action("SalesReport", "Facturacion")',
                    type: "POST",
                    data: {
                        fechaInicio: fechaInicio,
                        fechaFin: fechaFin,
                        tipoReporte: tipoReporte
                    },
                    success: function (data) {
                        // Verificar si hay error en la respuesta
                        if (data.error) {
                            $("#spinner").hide();
                            $("#mensajeInicial").show().html(`
                                <i class="bi bi-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                                <h4 class="mt-3 text-danger">Error al generar el reporte</h4>
                                <p>${data.error}</p>
                            `);
                            return;
                        }

                        try {
                            // Ocultar spinner
                            $("#spinner").hide();
                            $("#resumenCard").show();
                            $("#btnExportarExcel, #btnImprimir").show();

                            // Guardar datos para exportación
                            reportData = data;

                            // Verificar si hay datos
                            if (!data.Datos || data.Datos.length === 0) {
                                // No hay datos, mostrar mensaje
                                $("#chartContainer").hide();
                                $("#tablaResultados").hide();
                                $("#mensajeInicial").show().html(`
                                    <i class="bi bi-info-circle text-info" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3">No hay datos para mostrar</h4>
                                    <p>No se encontraron ventas en el período seleccionado.</p>
                                `);
                            } else {
                                // Hay datos, ocultar mensaje inicial
                                $("#mensajeInicial").hide();
                            }

                            // Valores seguros para evitar errores
                            const montoTotal = data.MontoTotal || 0;
                            const totalFacturas = data.TotalFacturas || 0;

                            // Actualizar resumen con verificación de nulos
                            $("#periodoTexto").text(`${data.PeriodoInicio || ''} - ${data.PeriodoFin || ''}`);
                            $("#totalFacturas").text(totalFacturas);
                            $("#montoTotal").text(`₡${montoTotal.toFixed(2)}`);

                            // Si hay datos, generar visualizaciones
                            if (data.Datos && data.Datos.length > 0) {
                                // Generar gráfico según tipo de reporte
                                generarGrafico(data);

                                // Generar tabla según tipo de reporte
                                generarTabla(data);
                            }
                        } catch (e) {
                            console.error("Error procesando datos del reporte:", e);
                            $("#spinner").hide();
                            $("#mensajeInicial").show().html(`
                                <i class="bi bi-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                                <h4 class="mt-3 text-danger">Error al procesar los datos</h4>
                                <p>Ocurrió un error al procesar la respuesta del servidor.</p>
                            `);
                        }
                    },
                    error: function (xhr, status, error) {
                        // Obtener mensaje de error más específico
                        let errorMsg = "Error de conexión";
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg = xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            try {
                                const response = JSON.parse(xhr.responseText);
                                if (response.error) errorMsg = response.error;
                            } catch (e) {
                                errorMsg = xhr.responseText.substring(0, 100); // Mostrar parte del error
                            }
                        }

                        // Ocultar spinner y mostrar error
                        $("#spinner").hide();
                        $("#mensajeInicial").show().html(`
                            <i class="bi bi-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                            <h4 class="mt-3 text-danger">Error al generar el reporte</h4>
                            <p>${errorMsg}</p>
                        `);
                    }
                });
            });

            // Exportar a Excel (simulado)
            $("#btnExportarExcel").click(function () {
                Swal.fire({
                    icon: 'info',
                    title: 'Exportación a Excel',
                    text: "Funcionalidad de exportación a Excel simulada. En una implementación real, se generaría un archivo Excel con los datos del reporte."
                });
            });

            // Imprimir
            $("#btnImprimir").click(function () {
                window.print();
            });

            // Actualizar título según tipo de reporte
            $("#tipoReporte").change(function () {
                const tipoReporte = $(this).val();
                let titulo = "";

                switch (tipoReporte) {
                    case "diario":
                        titulo = "Ventas por Día";
                        break;
                    case "categorias":
                        titulo = "Ventas por Categoría";
                        break;
                    case "productos":
                        titulo = "Productos más Vendidos";
                        break;
                }

                $("#tituloTabla").text(titulo);
            });
        });

        // Función para generar gráfico
        function generarGrafico(data) {
            try {
                // Destruir gráfico anterior si existe
                if (myChart) {
                    myChart.destroy();
                }

                // Mostrar contenedor
                $("#chartContainer").show();

                // Preparar datos según tipo de reporte
                let labels = [];
                let datasets = [];

                // Verificar si hay datos
                if (!data.Datos || data.Datos.length === 0) {
                    console.warn("No hay datos para generar el gráfico");
                    $("#chartContainer").hide();
                    return;
                }

                switch (data.TipoReporte) {
                    case "diario":
                        labels = data.Datos.map(item => {
                            if (item.Fecha) {
                                try {
                                    // Formatear fecha correctamente
                                    return new Date(item.Fecha).toLocaleDateString();
                                } catch (e) {
                                    return "Fecha no disponible";
                                }
                            }
                            return "Fecha no disponible";
                        });
                        datasets = [{
                            label: 'Ventas (₡)',
                            data: data.Datos.map(item => item.MontoTotal || 0),
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }];
                        break;

                    case "categorias":
                        labels = data.Datos.map(item => item.Categoria || "Sin categoría");
                        datasets = [{
                            label: 'Ventas por Categoría (₡)',
                            data: data.Datos.map(item => item.MontoTotal || 0),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)'
                            ],
                            borderWidth: 1
                        }];
                        break;

                    case "productos":
                        labels = data.Datos.map(item => item.ProductoNombre || "Producto sin nombre");
                        datasets = [{
                            label: 'Cantidad Vendida',
                            data: data.Datos.map(item => item.TotalVendido || 0),
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }];
                        break;
                }

                // Crear canvas si no existe
                if ($("#myChart").length === 0) {
                    $("#chartContainer").html('<canvas id="myChart"></canvas>');
                }

                // Crear gráfico
                const ctx = document.getElementById('myChart').getContext('2d');
                myChart = new Chart(ctx, {
                    type: data.TipoReporte === 'categorias' ? 'pie' : 'bar',
                    data: {
                        labels: labels,
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: data.TipoReporte !== 'categorias' ? {
                            y: {
                                beginAtZero: true
                            }
                        } : {}
                    }
                });
            } catch (error) {
                console.error("Error al generar el gráfico:", error);
                $("#chartContainer").hide();
            }
        }

        // Función para generar tabla
        function generarTabla(data) {
            try {
                // Verificar si hay datos
                if (!data.Datos || data.Datos.length === 0) {
                    console.warn("No hay datos para generar la tabla");
                    $("#tablaResultados").hide();
                    return;
                }

                // Mostrar contenedor
                $("#tablaResultados").show();

                // Obtener elementos de la tabla
                const tablaHeader = $("#tablaHeader");
                const tablaBody = $("#tablaBody");

                // Limpiar tabla
                tablaHeader.empty();
                tablaBody.empty();

                // Crear encabezados según tipo de reporte
                let headers = "";
                switch (data.TipoReporte) {
                    case "diario":
                        headers = `
                            <tr>
                                <th>Fecha</th>
                                <th>Total Facturas</th>
                                <th>Monto Total</th>
                            </tr>
                        `;
                        break;

                    case "categorias":
                        headers = `
                            <tr>
                                <th>Categoría</th>
                                <th>Total Productos Vendidos</th>
                                <th>Monto Total</th>
                            </tr>
                        `;
                        break;

                    case "productos":
                        headers = `
                            <tr>
                                <th>Producto</th>
                                <th>Cantidad Vendida</th>
                                <th>Monto Total</th>
                            </tr>
                        `;
                        break;
                }
                tablaHeader.html(headers);

                // Crear filas según tipo de reporte
                let rows = "";
                switch (data.TipoReporte) {
                    case "diario":
                        data.Datos.forEach(item => {
                            let fecha = "Fecha no disponible";
                            if (item.Fecha) {
                                try {
                                    fecha = new Date(item.Fecha).toLocaleDateString();
                                } catch (e) {
                                    console.warn("Error al formatear fecha:", e);
                                }
                            }
                            rows += `
                                <tr>
                                    <td>${fecha}</td>
                                    <td>${item.TotalVentas || 0}</td>
                                    <td class="text-end">₡${(item.MontoTotal || 0).toFixed(2)}</td>
                                </tr>
                            `;
                        });
                        break;

                    case "categorias":
                        data.Datos.forEach(item => {
                            rows += `
                                <tr>
                                    <td>${item.Categoria || "Sin categoría"}</td>
                                    <td>${item.TotalProductos || 0}</td>
                                    <td class="text-end">₡${(item.MontoTotal || 0).toFixed(2)}</td>
                                </tr>
                            `;
                        });
                        break;

                    case "productos":
                        data.Datos.forEach(item => {
                            rows += `
                                <tr>
                                    <td>${item.ProductoNombre || "Producto sin nombre"}</td>
                                    <td>${item.TotalVendido || 0}</td>
                                    <td class="text-end">₡${(item.MontoTotal || 0).toFixed(2)}</td>
                                </tr>
                            `;
                        });
                        break;
                }
                tablaBody.html(rows);
            } catch (error) {
                console.error("Error al generar la tabla:", error);
                $("#tablaResultados").hide();
            }
        }
    </script>
}